{"ast":null,"code":"var _jsxFileName = \"/Users/florianpohl/love-rooms-app/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    var _session$user;\n    // Vérifier si l'utilisateur est déjà connecté\n    const session = supabase.auth.getSession();\n    setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n    setLoading(false);\n\n    // Écouter les changements d'authentification\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      var _session$user2;\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n    };\n  }, []);\n\n  // Fonction de connexion\n  async function login(email, password) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Fonction d'inscription\n  async function register(email, password, userData) {\n    try {\n      // Inscription avec Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (authError) throw authError;\n\n      // Ajouter les données utilisateur supplémentaires\n      if (authData !== null && authData !== void 0 && authData.user) {\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: authData.user.id,\n          email,\n          nom: userData.nom,\n          prenom: userData.prenom,\n          civilite: userData.civilite,\n          telephone: userData.telephone,\n          role: 'proprietaire'\n        }]);\n        if (profileError) throw profileError;\n      }\n      return {\n        success: true,\n        data: authData\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Fonction de déconnexion\n  async function logout() {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","_session$user","session","auth","getSession","data","subscription","onAuthStateChange","_event","_session$user2","unsubscribe","login","email","password","error","signInWithPassword","success","message","register","userData","authData","authError","signUp","profileError","from","insert","id","nom","prenom","civilite","telephone","role","logout","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/florianpohl/love-rooms-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Vérifier si l'utilisateur est déjà connecté\n    const session = supabase.auth.getSession();\n    setUser(session?.user ?? null);\n    setLoading(false);\n\n    // Écouter les changements d'authentification\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (_event, session) => {\n        setUser(session?.user ?? null);\n        setLoading(false);\n      }\n    );\n\n    return () => {\n      subscription?.unsubscribe();\n    };\n  }, []);\n\n  // Fonction de connexion\n  async function login(email, password) {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Fonction d'inscription\n  async function register(email, password, userData) {\n    try {\n      // Inscription avec Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n\n      if (authError) throw authError;\n\n      // Ajouter les données utilisateur supplémentaires\n      if (authData?.user) {\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email,\n              nom: userData.nom,\n              prenom: userData.prenom,\n              civilite: userData.civilite,\n              telephone: userData.telephone,\n              role: 'proprietaire'\n            }\n          ]);\n\n        if (profileError) throw profileError;\n      }\n\n      return { success: true, data: authData };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  // Fonction de déconnexion\n  async function logout() {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}